IF
	Global("RR#Active","LOCALS",0)
	OR(4)
	  AttackedBy([ANYONE],DEFAULT)
	  TookDamage()
	  Help([EVILCUTOFF.0.MEPHIT])
	  Gender(Myself,3) // gated mephit
THEN
	RESPONSE #100
		SetGlobal("RR#Active","LOCALS",1)
		SetGlobalTimer("RR#Rest","LOCALS",2400) // 8 hours
		Enemy()
		Help()
		Continue()
END

IF
	Global("RR#Active","LOCALS",0)
        Allegiance(Myself,EVILCUTOFF)
	See([GOODCUTOFF]) // this cannot be in the previous block, otherwise neutral creatures would go hostile upon seeing a party member
THEN
	RESPONSE #100
		SetGlobal("RR#Active","LOCALS",1)
		SetGlobalTimer("RR#Rest","LOCALS",2400) // 8 hours
		Enemy()
		Help()
		Continue()
END

IF
	OR(4)
	  Global("RR#Active","LOCALS",0)
          !Allegiance(Myself,EVILCUTOFF) // better way to check for charm because STATE_CHARMED persists when the creature is attacked and becomes red circled again
	  StateCheck(Myself,STATE_IMMOBILE) // using this instead of STATE_DISABLED because the latter includes STATE_CHARMED
	  StateCheck(Myself,STATE_REALLY_DEAD) // prevents contingencies and other ReallyForceSpell() stuff from popping up on dead creatures
THEN
	RESPONSE #100
		NoAction()
END

IF

	StateCheck(Myself,STATE_PANIC)  // needed because the AI can perform script actions (i.e. drink potions) while panicked, unlike the player
THEN
	RESPONSE #100
		RandomWalkContinuous() // using this instead of NoAction() because otherwise panicked characters would stand in place
END

IF
	Global("RR#Active","LOCALS",1)
	!InActiveArea(Myself)
	!See([GOODCUTOFF])
THEN
	RESPONSE #100
		NoAction()
END

IF
	!GlobalTimerNotExpired("RR#Rest","LOCALS") // re-initialize the rest timer
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Rest","LOCALS",2400) // 8 hours
		SetGlobal("RR#Gust","LOCALS",0) // reset Gust of Wind variable
                ApplySpell(Myself,RESTORE_FULL_HEALTH) // heal up
                Rest()
END

IF
	!GlobalTimerNotExpired("RR#Help","LOCALS") // shout for help every two rounds while in combat, other mephits may hear it and join the battle
	See([GOODCUTOFF])
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Help","LOCALS",12)
		Help()
		Continue()
END

IF
	Global("RR#Cloud","LOCALS",0) // variable indicating that a cloud spell has been seen
	OR(8)
	  SpellCast([GOODCUTOFF.0.0.MAGE_ALL],WIZARD_INCENDIARY_CLOUD)
	  SpellCast([GOODCUTOFF.0.0.MAGE_ALL],WIZARD_STINKING_CLOUD)
	  SpellCast([GOODCUTOFF.0.0.MAGE_ALL],WIZARD_CLOUDKILL)
	  SpellCast([GOODCUTOFF.0.0.MAGE_ALL],WIZARD_DEATH_FOG)
	  SpellCast([GOODCUTOFF.0.0.BARD_ALL],WIZARD_INCENDIARY_CLOUD)
	  SpellCast([GOODCUTOFF.0.0.BARD_ALL],WIZARD_STINKING_CLOUD)
	  SpellCast([GOODCUTOFF.0.0.BARD_ALL],WIZARD_CLOUDKILL)
	  SpellCast([GOODCUTOFF.0.0.BARD_ALL],WIZARD_DEATH_FOG)
THEN
	RESPONSE #100
		SetGlobal("RR#Cloud","LOCALS",1) // set cloud variable
END

IF
	Global("RR#Cloud","LOCALS",0) // variable indicating that a cloud spell has been seen
	OR(8)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_DEATH_FOG)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(SecondNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_DEATH_FOG)
THEN
	RESPONSE #100
		SetGlobal("RR#Cloud","LOCALS",1) // set cloud variable
END

IF
	Global("RR#Cloud","LOCALS",0) // variable indicating that a cloud spell has been seen
	OR(8)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_DEATH_FOG)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(ThirdNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_DEATH_FOG)
THEN
	RESPONSE #100
		SetGlobal("RR#Cloud","LOCALS",1) // set cloud variable
END

IF
	Global("RR#Cloud","LOCALS",0) // variable indicating that a cloud spell has been seen
	OR(8)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_DEATH_FOG)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(FourthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_DEATH_FOG)
THEN
	RESPONSE #100
		SetGlobal("RR#Cloud","LOCALS",1) // set cloud variable
END

IF
	Global("RR#Cloud","LOCALS",0) // variable indicating that a cloud spell has been seen
	OR(8)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_DEATH_FOG)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(FifthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_DEATH_FOG)
THEN
	RESPONSE #100
		SetGlobal("RR#Cloud","LOCALS",1) // set cloud variable
END

IF
	Global("RR#Cloud","LOCALS",0) // variable indicating that a cloud spell has been seen
	OR(8)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.MAGE_ALL]),WIZARD_DEATH_FOG)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_INCENDIARY_CLOUD)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_STINKING_CLOUD)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_CLOUDKILL)
	  SpellCast(SixthNearest([GOODCUTOFF.0.0.BARD_ALL]),WIZARD_DEATH_FOG)
THEN
	RESPONSE #100
		SetGlobal("RR#Cloud","LOCALS",1) // set cloud variable
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	Global("RR#Gust","LOCALS",0)
	Global("RR#Cloud","LOCALS",1) // variable indicating that a cloud spell has been seen
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobal("RR#Gust","LOCALS",1) // once per day
		SetGlobal("RR#Cloud","LOCALS",0) // reset cloud variable
		ForceSpellRES("RR#MAIGW",Myself) // Gust of Wind
END

IF
	!Gender(Myself,3) // the mephit has not been gated
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Gate","LOCALS")
	Global("RR#MNOGT","GLOBAL",0) // gating is allowed
        OR(3)
          RandomNum(10,1) // Air Mephits hate to gate in others of their kind, hence the lower probability
	  HPPercentLT(Myself,31)
	  !See([GOODCUTOFF]) // if no enemies are nearby
THEN
	RESPONSE #25
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Gate","LOCALS",300) // a gate can be opened only once per hour
                DisplayStringHead(Myself,@1800) // attempts to open an interplanar gate
		ForceSpellRES("RR#MAIGT",Myself) // Gate (Air Mephit version)
	RESPONSE #75
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Gate","LOCALS",300) // a gate can be opened only once per hour
                DisplayStringHead(Myself,@1801) // fails to open an interplanar gate
		SpellNoDec(Myself,DO_NOTHING)
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Blur","LOCALS") // Blur can be used once per hour
	!StateCheck(Myself,STATE_BLUR)
	!CheckStatGT(Player1,0,TRUE_SIGHT)
	!CheckStatGT(Player2,0,TRUE_SIGHT)
	!CheckStatGT(Player3,0,TRUE_SIGHT)
	!CheckStatGT(Player4,0,TRUE_SIGHT)
	!CheckStatGT(Player5,0,TRUE_SIGHT)
	!CheckStatGT(Player6,0,TRUE_SIGHT)
	!CheckStatGT([GOODCUTOFF.0.PLANATAR],0,TRUE_SIGHT)
	!CheckStatGT([GOODCUTOFF.0.DARKPLANATAR],0,TRUE_SIGHT)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Blur","LOCALS",300) // One hour
		ForceSpellRES("RR#WI201",Myself) // Blur
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See([GOODCUTOFF.0.0.MAGE_ALL])
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(SecondNearest([GOODCUTOFF.0.0.MAGE_ALL]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See([GOODCUTOFF.0.0.BARD_ALL])
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(SecondNearest([GOODCUTOFF.0.0.BARD_ALL]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See([GOODCUTOFF.0.0.CLERIC_ALL])
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(SecondNearest([GOODCUTOFF.0.0.CLERIC_ALL]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See([GOODCUTOFF.0.0.DRUID_ALL])
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(SecondNearest([GOODCUTOFF.0.0.DRUID_ALL]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(MostDamagedOf([PC]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTSLASHING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See([GOODCUTOFF])
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(SecondNearest([GOODCUTOFF]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(ThirdNearest([GOODCUTOFF]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(FourthNearest([GOODCUTOFF]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(FifthNearest([GOODCUTOFF]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!GlobalTimerNotExpired("RR#Cast","LOCALS")
	!GlobalTimerNotExpired("RR#Bwpn","LOCALS") // Breath weapon timer
	See(SixthNearest([GOODCUTOFF]))
	CheckStatLT(LastSeenBy(Myself),50,RESISTMISSILE)
	CheckStatLT(LastSeenBy(Myself),50,RESISTPIERCING)
	!StateCheck(LastSeenBy(Myself),STATE_MIRRORIMAGE)
        CheckStatLT(LastSeenBy(Myself),1,STONESKINS)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Bwpn","LOCALS",12) // Breath weapon timer
		ForceSpellRES("RR#MAIBG",LastSeenBy(Myself)) // Breathes Grit
END

IF
	!Gender(Myself,3) // the mephit has not been gated
	!GlobalTimerNotExpired("RR#Cast","LOCALS") // open a gate if all other abilities are unavailable
	!GlobalTimerNotExpired("RR#Gate","LOCALS")
        Global("RR#MNOGT","GLOBAL",0) // gating is allowed
THEN
	RESPONSE #25
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Gate","LOCALS",300) // a gate can be opened only once per hour
                DisplayStringHead(Myself,@1800) // attempts to open an interplanar gate
		ForceSpellRES("RR#MAIGT",Myself) // Gate (Air Mephit version)
	RESPONSE #75
		SetGlobalTimer("RR#Cast","LOCALS",6)
		SetGlobalTimer("RR#Gate","LOCALS",300) // a gate can be opened only once per hour
                DisplayStringHead(Myself,@1801) // fails to open an interplanar gate
		SpellNoDec(Myself,DO_NOTHING)
END

IF
	OR(6)  // note: this block specifically checks for Players in order to target unconscious opponents (if any) since they can't be seen otherwise
	  See(Player1)
	  See(Player2)
	  See(Player3)
	  See(Player4)
	  See(Player5)
	  See(Player6)
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT([GOODCUTOFF],0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
        CheckStatLT([GOODCUTOFF],100,RESISTSLASHING)
	See([GOODCUTOFF]) // note: this block is intended to check for opponents who may be panicked
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(SixthNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(SixthNearest([GOODCUTOFF]),STATE_PANIC)
        CheckStatLT(SixthNearest([GOODCUTOFF]),100,RESISTSLASHING)
	!StateCheck(SixthNearest([GOODCUTOFF]),STATE_MIRRORIMAGE)
        CheckStatLT(SixthNearest([GOODCUTOFF]),1,STONESKINS)
	See(SixthNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(FifthNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(FifthNearest([GOODCUTOFF]),STATE_PANIC)
        CheckStatLT(FifthNearest([GOODCUTOFF]),100,RESISTSLASHING)
	!StateCheck(FifthNearest([GOODCUTOFF]),STATE_MIRRORIMAGE)
        CheckStatLT(FifthNearest([GOODCUTOFF]),1,STONESKINS)
	See(FifthNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(FourthNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(FourthNearest([GOODCUTOFF]),STATE_PANIC)
        CheckStatLT(FourthNearest([GOODCUTOFF]),100,RESISTSLASHING)
	!StateCheck(FourthNearest([GOODCUTOFF]),STATE_MIRRORIMAGE)
        CheckStatLT(FourthNearest([GOODCUTOFF]),1,STONESKINS)
	See(FourthNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(ThirdNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(ThirdNearest([GOODCUTOFF]),STATE_PANIC)
        CheckStatLT(ThirdNearest([GOODCUTOFF]),100,RESISTSLASHING)
	!StateCheck(ThirdNearest([GOODCUTOFF]),STATE_MIRRORIMAGE)
        CheckStatLT(ThirdNearest([GOODCUTOFF]),1,STONESKINS)
	See(ThirdNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(SecondNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(SecondNearest([GOODCUTOFF]),STATE_PANIC)
        CheckStatLT(SecondNearest([GOODCUTOFF]),100,RESISTSLASHING)
	!StateCheck(SecondNearest([GOODCUTOFF]),STATE_MIRRORIMAGE)
        CheckStatLT(SecondNearest([GOODCUTOFF]),1,STONESKINS)
	See(SecondNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT([GOODCUTOFF],0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck([GOODCUTOFF],STATE_PANIC)
        CheckStatLT([GOODCUTOFF],100,RESISTSLASHING)
	!StateCheck([GOODCUTOFF],STATE_MIRRORIMAGE)
        CheckStatLT([GOODCUTOFF],1,STONESKINS)
	See([GOODCUTOFF])
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(SecondNearest([PC.0.0.MAGE]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(SecondNearest([PC.0.0.MAGE]),STATE_PANIC)
        CheckStatLT(SecondNearest([PC.0.0.MAGE]),100,RESISTSLASHING)
	!StateCheck(SecondNearest([PC.0.0.MAGE]),STATE_MIRRORIMAGE)
        CheckStatLT(SecondNearest([PC.0.0.MAGE]),1,STONESKINS)
	See(SecondNearest([PC.0.0.MAGE])) // these blocks are optimized for targeting low AC characters such as single-class mages and mage/thieves
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT([PC.0.0.MAGE],0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck([PC.0.0.MAGE],STATE_PANIC)
        CheckStatLT([PC.0.0.MAGE],100,RESISTSLASHING)
	!StateCheck([PC.0.0.MAGE],STATE_MIRRORIMAGE)
        CheckStatLT([PC.0.0.MAGE],1,STONESKINS)
	See([PC.0.0.MAGE]) // these blocks are optimized for targeting low AC characters such as single-class mages and mage/thieves
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(SecondNearest([PC.0.0.MAGE_THIEF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(SecondNearest([PC.0.0.MAGE_THIEF]),STATE_PANIC)
        CheckStatLT(SecondNearest([PC.0.0.MAGE_THIEF]),100,RESISTSLASHING)
	!StateCheck(SecondNearest([PC.0.0.MAGE_THIEF]),STATE_MIRRORIMAGE)
        CheckStatLT(SecondNearest([PC.0.0.MAGE_THIEF]),1,STONESKINS)
	See(SecondNearest([PC.0.0.MAGE_THIEF])) // these blocks are optimized for targeting low AC characters such as single-class mages and mage/thieves
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT([PC.0.0.MAGE_THIEF],0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck([PC.0.0.MAGE_THIEF],STATE_PANIC)
        CheckStatLT([PC.0.0.MAGE_THIEF],100,RESISTSLASHING)
	!StateCheck([PC.0.0.MAGE_THIEF],STATE_MIRRORIMAGE)
        CheckStatLT([PC.0.0.MAGE_THIEF],1,STONESKINS)
	See([PC.0.0.MAGE_THIEF]) // these blocks are optimized for targeting low AC characters such as single-class mages and mage/thieves
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(WorstAC([PC]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	!StateCheck(WorstAC([PC]),STATE_PANIC)
        CheckStatLT(WorstAC([PC]),100,RESISTSLASHING)
	!StateCheck(WorstAC([PC]),STATE_MIRRORIMAGE)
        CheckStatLT(WorstAC([PC]),1,STONESKINS)
        !StateCheck(WorstAC([PC]),STATE_CHARMED)
	See(WorstAC([PC])) // these blocks are optimized for targeting low AC characters such as single-class mages and mage/thieves
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	AttackedBy([GOODCUTOFF],DEFAULT)
	!CheckStatGT(LastAttackerOf(Myself),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
        !StateCheck(LastAttackerOf(Myself),STATE_PANIC)
        CheckStatLT(LastAttackerOf(Myself),100,RESISTSLASHING)
	Range(LastAttackerOf(Myself),8)
	RandomNum(3,1)
	See(LastAttackerOf(Myself))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	AttackedBy([GOODCUTOFF],DEFAULT)
	!CheckStatGT(LastAttackerOf(Myself),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
        !StateCheck(LastAttackerOf(Myself),STATE_PANIC)
        CheckStatLT(LastAttackerOf(Myself),100,RESISTSLASHING)
	Range(LastAttackerOf(Myself),4)
	See(LastAttackerOf(Myself))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(SixthNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(SixthNearest([GOODCUTOFF]),STATE_IMMOBILE)
        CheckStatLT(SixthNearest([GOODCUTOFF]),100,RESISTSLASHING)
	See(SixthNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(FifthNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(FifthNearest([GOODCUTOFF]),STATE_IMMOBILE)
        CheckStatLT(FifthNearest([GOODCUTOFF]),100,RESISTSLASHING)
	See(FifthNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(FourthNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(FourthNearest([GOODCUTOFF]),STATE_IMMOBILE)
        CheckStatLT(FourthNearest([GOODCUTOFF]),100,RESISTSLASHING)
	See(FourthNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(ThirdNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(ThirdNearest([GOODCUTOFF]),STATE_IMMOBILE)
        CheckStatLT(ThirdNearest([GOODCUTOFF]),100,RESISTSLASHING)
	See(ThirdNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(SecondNearest([GOODCUTOFF]),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(SecondNearest([GOODCUTOFF]),STATE_IMMOBILE)
        CheckStatLT(SecondNearest([GOODCUTOFF]),100,RESISTSLASHING)
	See(SecondNearest([GOODCUTOFF]))
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT([GOODCUTOFF],0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck([GOODCUTOFF],STATE_IMMOBILE)
        CheckStatLT([GOODCUTOFF],100,RESISTSLASHING)
	See([GOODCUTOFF])
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(Player6,0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(Player6,STATE_IMMOBILE)
        CheckStatLT(Player6,100,RESISTSLASHING)
	See(Player6)
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(Player5,0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(Player5,STATE_IMMOBILE)
        CheckStatLT(Player5,100,RESISTSLASHING)
	See(Player5)
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(Player4,0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(Player4,STATE_IMMOBILE)
        CheckStatLT(Player4,100,RESISTSLASHING)
	See(Player4)
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(Player3,0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(Player3,STATE_IMMOBILE)
        CheckStatLT(Player3,100,RESISTSLASHING)
	See(Player3)
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(Player2,0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(Player2,STATE_IMMOBILE)
        CheckStatLT(Player2,100,RESISTSLASHING)
	See(Player2)
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	!CheckStatGT(Player1,0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle of higher
	StateCheck(Player1,STATE_IMMOBILE)
        CheckStatLT(Player1,100,RESISTSLASHING)
	See(Player1)
	False()
THEN
	RESPONSE #100
		NoAction()
END

IF
	Global("RR#NOPND","GLOBAL",0) // opening doors is allowed
    Allegiance(Myself,EVILCUTOFF) // humanoids and some intelligent monsters can open unlocked doors
    !AreaType(OUTDOOR)
    !Range(NearestEnemyOf(Myself),30)
    Range(NearestDoor,15) // if the nearest door is in visual range. note: this seems to auto-skip locked doors
    OpenState(NearestDoor,FALSE)
    OR(2)
      !AreaCheck("AR0603") // Irenicus' Dungeon level 2 (avoid traps behind closed doors)
      !See("Door04") // this door leads to the trapped corridor
THEN
    RESPONSE #100
        MoveToObject(NearestDoor)
        OpenDoor(NearestDoor)
END

IF
	!StateCheck(LastSeenBy(Myself),STATE_REALLY_DEAD)
        !StateCheck(LastSeenBy(Myself),STATE_INVISIBLE)
    Allegiance(LastSeenBy(Myself),GOODCUTOFF) // safety check
        OR(2)
	  !StateCheck(Myself,STATE_BLIND) // don't attack when blinded
	  Range(LastSeenBy(Myself),2) // unless the target is extremely close by
	!CheckStatGT(LastSeenBy(Myself),0,WIZARD_PROTECTION_FROM_MAGIC_WEAPONS)  // no Mantle or higher
        CheckStatLT(LastSeenBy(Myself),100,RESISTSLASHING)
THEN
	RESPONSE #100
		AttackReevaluate(LastSeenBy(Myself),30)
END

IF
	!GlobalTimerNotExpired("RR#Move","LOCALS") // help -> move timer
	Help([EVILCUTOFF.0.MEPHIT])
        InMyArea(LastHelp(Myself))
	!StateCheck(LastHelp(Myself),STATE_REALLY_DEAD)
THEN
	RESPONSE #100
		SetGlobalTimer("RR#Move","LOCALS",6)
		MoveToObject(LastHelp(Myself))
END

IF
	!GlobalTimerNotExpired("RR#Move","LOCALS")
THEN
	RESPONSE #100
		RandomWalkContinuous()
END